exec("""\n_2a = \"\"\"\n\n\nASSIGNMENT N0 – 2A   			\n\nTitle: Design and develop SQL DDL statements which demonstrate the use of SQL objects such as table, view, index, sequence, synonym, different constraints.  \n\n----------------------------------------------------------------\nCreate the university database having following specifications.\n\n\n1. Department table (dept_no, dept_name, building_name). Apply unique constraint on the name field.\n\nmysql> create database flayer;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> use flayer;\nDatabase changed\n\nmysql> create table department(dept_no int, dept_name varchar(20), building_name varchar(20), unique(dept_name));\nQuery OK, 0 rows affected (0.25 sec)\n\nmysql> desc department;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| dept_no       | int(11)     | YES  |     | NULL    |       |\n| dept_name     | varchar(20) | YES  | UNI | NULL    |       |\n| building_name | varchar(20) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\n\n2. Intructor Table(ins_id, ins_name, dpt_no, salary, mob_no). Apply NOT NULL constraint on name field. \n\nmysql> create table instructor( ins_id int, ins_name varchar(20) NOT NULL, dpt_no int, salary int, mob_no int, primary key(ins_id));\nQuery OK, 0 rows affected (0.20 sec)\n\nmysql> desc instructor;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| ins_id   | int(11)     | NO   | PRI | NULL    |       |\n| ins_name | varchar(20) | NO   |     | NULL    |       |\n| dpt_no   | int(11)     | YES  |     | NULL    |       |\n| salary   | int(11)     | YES  |     | NULL    |       |\n| mob_no   | int(11)     | YES  |     | NULL    |       |\n+----------+-------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n\n\n\n3. Course table(course_id, title, dpt_no, credits). Apply primary key on course id field.\n\nmysql> create table course( course_id int , title varchar(10), dpt_no int, credits int, primary key(course_id));\nQuery OK, 0 rows affected (0.22 sec)\n\nmysql> desc course;\n+-----------+-------------+------+-----+---------+-------+\n| Field     | Type        | Null | Key | Default | Extra |\n+-----------+-------------+------+-----+---------+-------+\n| course_id | int(11)     | NO   | PRI | NULL    |       |\n| title     | varchar(10) | YES  |     | NULL    |       |\n| dpt_no    | int(11)     | YES  |     | NULL    |       |\n| credits   | int(11)     | YES  |     | NULL    |       |\n+-----------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\n\n4. Teachers table(teacher_id, course_id, semester, year). Apply foreign key on course_id field.  \n\nmysql> create table teachers(teacher_id int, course_id int,semester int,\nyear year, foreign key(teacher_id) references instructor(ins_id), foreign key(course_id) references course(course_id));\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> desc teachers;\n+------------+---------+------+-----+---------+-------+\n| Field      | Type    | Null | Key | Default | Extra |\n+------------+---------+------+-----+---------+-------+\n| teacher_id | int(11) | YES  | MUL | NULL    |       |\n| course_id  | int(11) | YES  | MUL | NULL    |       |\n| semester   | int(11) | YES  |     | NULL    |       |\n| year       | year(4) | YES  |     | NULL    |       |\n+------------+---------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\n\nQueries:\n\n1. Add primary key in department table. \nmysql> alter table department add primary key(dept_no);\nQuery OK, 0 rows affected (0.34 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc department;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| dept_no       | int(11)     | NO   | PRI | NULL    |       |\n| dept_name     | varchar(20) | YES  | UNI | NULL    |       |\n| building_name | varchar(20) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\n\n2. Add foreign key in instructor table. \n\nmysql> alter table instructor add CONSTRAINT fk_inst foreign key(dpt_no) references department(dept_no);\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc instructor;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| ins_id   | int(11)     | NO   | PRI | NULL    |       |\n| ins_name | varchar(20) | NO   |     | NULL    |       |\n| dpt_no   | int(11)     | YES  | MUL | NULL    |       |\n| salary   | int(11)     | YES  |     | NULL    |       |\n| mob_no   | int(11)     | YES  |     | NULL    |       |\n+----------+-------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n\n3. Modify the table department by adding a column budget.\n\nmysql> alter table department add budget int;\nQuery OK, 0 rows affected (0.35 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc department;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| dept_no       | int(11)     | NO   | PRI | NULL    |       |\n| dept_name     | varchar(20) | YES  | UNI | NULL    |       |\n| building_name | varchar(20) | YES  |     | NULL    |       |\n| budget        | int(11)     | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\n4. Create unique index on mobile_no of instructor table.\n\nmysql> create UNIQUE INDEX ins_index on instructor(mob_no);\nQuery OK, 0 rows affected (0.16 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> show index from instructor;\n+----------+----------+---------+-------------+-------------+-----------+\n| Table    |Non_unique|Key_name | Seq_in_index| Column_name | Collation |\n+----------+----------+---------+-------------+-------------+-----------+\n|instructor|        0 | PRIMARY |           1 | ins_id      | A         |\n|instructor|        0 |ins_index|           1 | mob_no      | A         |\n|instructor|        1 | dpt_no  |           1 | dpt_no      | A         |\n+----------+----------+---------+-------------+-------------+-----------+\n+------------+---------+-------+------+----------+-------+--------------+\n|Cardinality |Sub_part |Packed | Null |Index_type|Comment|Index_comment |\n+------------+---------+-------+------+----------+-------+--------------+\n|          0 |    NULL | NULL  |      | BTREE    |       |              |\n|          0 |    NULL | NULL  | YES  | BTREE    |       |              |\n|          0 |    NULL | NULL  | YES  | BTREE    |       |              |\n+------------+---------+-------+------+----------+-------+--------------+\n3 rows in set (0.00 sec)\n\n5. Create a view of instructor relation except salary field.\n\nmysql> create view ins_view as\n    -> select ins_id, ins_name, dpt_no, mob_no\n    -> from instructor;\nQuery OK, 0 rows affected (0.04 sec)\n\n6. Insert record into instructor table using newly created view name.\n\nmysql> insert into ins_view values(001, "ZZZ", 1, 991),(002,"YYY", 3, 992),(003, "XXX", "1", 993);\nQuery OK, 3 rows affected (0.04 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> select * from ins_view;\n+--------+----------+--------+--------+\n| ins_id | ins_name | dpt_no | mob_no |\n+--------+----------+--------+--------+\n|      1 | ZZZ      |      1 |    991 |\n|      2 | YYY      |      3 |    992 |\n|      3 | XXX      |      1 |    993 |\n+--------+----------+--------+--------+\n3 rows in set (0.00 sec)\n\n7. Update the dpt_no of particular instructor using update view.\n\nmysql> update ins_view\n    -> set dpt_no = 2\n    -> where ins_id = 2;\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from ins_view;\n+--------+----------+--------+--------+\n| ins_id | ins_name | dpt_no | mob_no |\n+--------+----------+--------+--------+\n|      1 | ZZZ      |      1 |    991 |\n|      2 | YYY      |      2 |    992 |\n|      3 | XXX      |      1 |    993 |\n+--------+----------+--------+--------+\n3 rows in set (0.00 sec)\n\n8. Delete record of particular instructor  from instructor table using newly created view name.\nmysql> delete from ins_view where ins_id = 3;\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> select * from ins_view;\n+--------+----------+--------+--------+\n| ins_id | ins_name | dpt_no | mob_no |\n+--------+----------+--------+--------+\n|      1 | ZZZ      |      1 |    991 |\n|      2 | YYY      |      2 |    992 |\n+--------+----------+--------+--------+\n2 rows in set (0.00 sec)\n\n\n9. Delete the last view.\n\nmysql> drop view ins_view;\nQuery OK, 0 rows affected (0.00 sec)\n\n\n10. Remove the budget from department table.\nmysql> alter table department drop budget;\nQuery OK, 0 rows affected (0.50 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc department;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| dept_no       | int(11)     | NO   | PRI | NULL    |       |\n| dept_name     | varchar(20) | YES  | UNI | NULL    |       |\n| building_name | varchar(20) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\n\n11. Increase the size of the title field of course relation.\nmysql> alter table course modify title varchar(20);\nQuery OK, 0 rows affected (0.07 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc course;\n+-----------+-------------+------+-----+---------+-------+\n| Field     | Type        | Null | Key | Default | Extra |\n+-----------+-------------+------+-----+---------+-------+\n| course_id | int(11)     | NO   | PRI | NULL    |       |\n| title     | varchar(20) | YES  |     | NULL    |       |\n| dpt_no    | int(11)     | YES  |     | NULL    |       |\n| credits   | int(11)     | YES  |     | NULL    |       |\n+-----------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\n\n12. Delete the index from the instructor table.\n\nmysql> drop index ins_index on instructor;\nQuery OK, 0 rows affected (0.13 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n\n13. Rename the course table to another table name.\n\nmysql> alter table course rename to course_table;\nQuery OK, 0 rows affected (0.08 sec)\n\n\n14. Create a view by showing a instructor name and title of course they teach.\n\nmysql> create view crs_view as  select ins_name, title from instructor,course_table where instructor.dpt_no = course_table.dpt_no;\nQuery OK, 0 rows affected (0.03 sec)\nmysql> select * from crs_view;\n+----------+-------+\n| ins_name | title |\n+----------+-------+\n| YYY      | ABC   |\n| AAA      | XYC   |\n+----------+-------+\n2 rows in set (0.00 sec)\n\n\n15. Delete the primary key from the department table.\n\nmysql> alter table instructor drop foreign key fk_inst;\nQuery OK, 0 rows affected (0.09 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> alter table department drop primary key;\nQuery OK, 0 rows affected (0.46 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> desc department;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| dept_no       | int(11)     | NO   |     | NULL    |       |\n| dept_name     | varchar(20) | YES  | UNI | NULL    |       |\n| building_name | varchar(20) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\n\n16. Create a sequence(or use the AUTO_INCREMENT attributes) on course_id starting with 51.\n\nmysql> alter table course_table modify course_id int NOT NULL AUTO_INCREMENT;\nQuery OK, 2 rows affected (0.53 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> desc course_table;\n+-----------+-------------+------+-----+---------+----------------+\n| Field     | Type        | Null | Key | Default | Extra          |\n+-----------+-------------+------+-----+---------+----------------+\n| course_id | int(11)     | NO   | PRI | NULL    | auto_increment |\n| title     | varchar(20) | YES  |     | NULL    |                |\n| dpt_no    | int(11)     | YES  |     | NULL    |                |\n| credits   | int(11)     | YES  |     | NULL    |                |\n+-----------+-------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\nmysql> alter table course_table AUTO_INCREMENT = 51;\nQuery OK, 0 rows affected (0.04 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> insert into course_table(title, dpt_no, credits) values('ABC', 2, 4);\nQuery OK, 1 row affected (0.06 sec)\nmysql> insert into course_table(title, dpt_no, credits) values('ABB', 1, 4);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> select * from course_table;\n+-----------+-------+--------+---------+\n| course_id | title | dpt_no | credits |\n+-----------+-------+--------+---------+\n|         1 | ABC   |      2 |       5 |\n|         2 | XYC   |      3 |       4 |\n|        51 | ABC   |      2 |       4 |\n|        52 | ABB   |      1 |       4 |\n+-----------+-------+--------+---------+\n4 rows in set (0.00 sec)\n\n\n17. Create database and show all databases.\nmysql> create database flayer;\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| Employee           |\n| emp                |\n| employee           |\n| flayer             |\n| mysql              |\n| practical1         |\n| student            |\n| sys                |\n| university         |\n+--------------------+\n10 rows in set (0.00 sec)\n\n\n18. Create table and show all table.\n\nmysql> show tables;\n+------------------+\n| Tables_in_flayer |\n+------------------+\n| course           |\n| department       |\n| instructor       |\n| teachers         |\n+------------------+\n4 rows in set (0.00 sec)\n\n\n19. Delete all records with truncate command.\n\nmysql> truncate table course_table;\nQuery OK, 0 rows affected (0.14 sec)\n\nmysql> truncate table department;\nQuery OK, 0 rows affected (0.10 sec)\n\nmysql> truncate table instructor;\nQuery OK, 0 rows affected (0.11 sec)\n\nmysql> truncate table persons;\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> truncate table teahers;\nQuery OK, 0 rows affected (0.10 sec)\n\n\n20. Delete teacher table.\n\nmysql> drop table teachers;\nQuery OK, 0 rows affected (0.21 sec)\n\nmysql> show tables;\n+------------------+\n| Tables_in_flayer |\n+------------------+\n| course_table     |\n| crs_view         |\n| department       |\n| instructor       |\n+------------------+\n4 rows in set (0.00 sec)\n\n\n\"\"\"\n_2b = \"\"\"\n\n\n\nASSIGNMENT N0 – 2B				\n\nTitle : Design at least 10 SQL queries for suitable database application using SQL DML statements: Insert, Select, Update, delete with operators, functions, and set operator.  \n\n----------------------------------------------------------------\nCreate a medical database having following table-\n\n\n1. Patient table(pat_id, pat_name, date_of_admit, age, city)\n\nmysql> CREATE TABLE Patient(pat_id VARCHAR(20), pat_name VARCHAR(20), date_of_admit YEAR, age INT, city varchar(20),PRIM\nARY KEY(pat_id) );\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> DESC Patient;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| pat_id        | varchar(20) | NO   | PRI | NULL    |       |\n| pat_name      | varchar(20) | YES  |     | NULL    |       |\n| date_of_admit | year        | YES  |     | NULL    |       |\n| age           | int         | YES  |     | NULL    |       |\n| city          | varchar(20) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n\n\n2. Doctor Table(doc_id, doc_name, qualification, exp , dept, city, salary)\n\nmysql> CREATE TABLE Doctor(doc_id VARCHAR(20), doc_name VARCHAR(20), qualification varchar(10), exp INT, dept VARCHAR(20\n), city VARCHAR(20), salary INT, PRIMARY KEY(doc_id));\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> DESC Doctor;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| doc_id        | varchar(20) | NO   | PRI | NULL    |       |\n| doc_name      | varchar(20) | YES  |     | NULL    |       |\n| qualification | varchar(10) | YES  |     | NULL    |       |\n| exp           | int         | YES  |     | NULL    |       |\n| dept          | varchar(20) | YES  |     | NULL    |       |\n| city          | varchar(20) | YES  |     | NULL    |       |\n| salary        | int         | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n7 rows in set (0.00 sec)\n\n \n\n\n\n\n3. Treats Table(doc_id, pat_id, disease). Foreign key on doc_id and pat_id, doc_id ON delete cascade, pat_id ON delete set null.\n\nmysql> CREATE TABLE Treats(pat_id VARCHAR(20),doc_id VARCHAR(20), disease VARCHAR(20), CONSTRAINT fk_pat FOREIGN KEY(pat_id) REFERENCES Patient(pat_id) ON DELETE SET NULL , CONSTRAINT fk_doc FOREIGN KEY(doc_id) REFERENCES Doctor(doc_id) ON\nDELETE CASCADE );\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> DESC Treats;\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| pat_id  | varchar(20) | YES  | MUL | NULL    |       |\n| doc_id  | varchar(20) | YES  | MUL | NULL    |       |\n| disease | varchar(20) | YES  |     | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\nQueries-\n\n1. Insert at least 5 record in each table.\n\nmysql> INSERT INTO Patient (pat_id, pat_name, date_of_admit, age, city) VALUES\n    -> ('p1', 'AAA', 2023-09-15, 25, 'Pune'),\n    -> ('p2', 'AAB', 2023-09-16, 30, 'Mumbai'),\n    -> ('p3', 'AAC', 2023-09-17, 35, 'Hyderabad'),\n    -> ('p4', 'AAD', 2023-09-18, 40, 'Pune'),\n    -> ('p5', 'AAE', 2023-09-19, 45, 'Nashik'),\n    -> ('p6', 'AAF', 2023-09-20, 50, 'Delhi'),\n    -> ('p7', 'AAG', 2023-09-21, 28, 'Chennai'),\n    -> ('p8', 'AAH', 2023-09-22, 33, 'Hyderabad'),\n    -> ('p9', 'AAI', 2023-09-23, 38, 'Bangalore'),\n    -> ('p10', 'AAJ', 2023-09-24, 43, 'Mumbai');\nQuery OK, 10 rows affected (0.00 sec)\nRecords: 10 Duplicates: 0 Warnings: 0\n\nmysql> SELECT * FROM Patient;\n+--------+----------+---------------+------+-----------+\n| pat_id | pat_name | date_of_admit | age  | city      |\n+--------+----------+---------------+------+-----------+\n| p1     | AAA      |          1999 |   25 | Pune      |\n| p10    | AAJ      |          1990 |   43 | Mumbai    |\n| p2     | AAB      |          1998 |   30 | Mumbai    |\n| p3     | AAC      |          1997 |   35 | Hyderabad |\n| p4     | AAD      |          1996 |   40 | Pune      |\n| p5     | AAE      |          1995 |   45 | Nashik    |\n| p6     | AAF      |          1994 |   50 | Delhi     |\n| p7     | AAG      |          1993 |   28 | Chennai   |\n| p8     | AAH      |          1992 |   33 | Hyderabad |\n| p9     | AAI      |          1991 |   38 | Banglore  |\n+--------+----------+---------------+------+-----------+\n10 rows in set (0.00 sec)\n\n\n\nmysql> INSERT INTO Doctor (doc_id, doc_name, qualification, exp, dept, city, salary)\n    -> VALUES\n    ->     ('d101', 'Shubham', 'MBBS', 10, 'General', 'Pune', 12000),\n    ->     ('d102', 'Shushant', 'PhD', 15, 'Accident', 'Mumbai', 14000),\n    ->     ('d103', 'Ved', 'MD', 8, 'Orthopedics', 'Hyderabad', 11000),\n    ->     ('d104', 'Om', 'MD', 12, 'Pediatrics', 'Chennai', 10000),\n    ->     ('d105', 'Suhas', 'PhD', 20, 'General', 'Kolkata', 15000);\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5 Duplicates: 0  Warnings: 0\n\nmysql> SELECT * FROM Doctor;\n5 rows in set (0.00 sec)\n+------+---------+-------------+---+-------------+-----------+-------+\n|doc_id|doc_name |qualification|exp| dept        | city      |salary |\n+------+---------+-------------+---+-------------+-----------+-------+\n|d101  | Shubham | MBBS        |10 | General     | Pune      | 12000 |\n|d102  | Shushant| PhD         |15 | Accident    | Mumbai    | 14000 |\n|d103  | Ved     | MD          | 8 | Orthopedics | Hyderabad | 11000 |\n|d104  | Om      | MD          |12 | Pediatrics  | Chennai   | 10000 |\n|d105  | Suhas   | PhD         |20 | General     | Kolkata   | 15000 |\n+------+---------+-------------+---+-------------+-----------+-------+\n5 rows in set (0.00 sec)\n\nmysql> INSERT INTO Treats (doc_id, pat_id, disease)\n    -> VALUES\n    ->     ('d101', 'p1', 'Hypertension'),\n    ->     ('d102', 'p2', 'Migraine'),\n    ->     ('d103', 'p3', 'Fractured Arm'),\n    ->     ('d104', 'p4', 'Bronchitis'),\n    ->     ('d105', 'p5', 'Cancer');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> SELECT * FROM Treats;\n+--------+--------+---------------+\n| pat_id | doc_id | disease       |\n+--------+--------+---------------+\n| p1     | d101   | Hypertension  |\n| p2     | d102   | Migraine      |\n| p3     | d103   | Fractured Arm |\n| p4     | d104   | Bronchitis    |\n| p5     | d105   | Cancer        |\n+--------+--------+---------------+\n5 rows in set (0.00 sec)\n\n\n2. Display all the patients name between the age group 18-50.\n\nmysql> SELECT pat_name FROM Patient WHERE age BETWEEN 18 AND 50;\n+----------+\n| pat_name |\n+----------+\n| AAA      |\n| AAJ      |\n| AAB      |\n| AAC      |\n| AAD      |\n| AAE      |\n| AAF      |\n| AAG      |\n| AAH      |\n| AAI      |\n+----------+\n10 rows in set (0.00 sec)\n\n\n3. Display the list of doctors who are MD.\n\nmysql> SELECT doc_name FROM Doctor WHERE qualification = 'MD';\n+----------+\n| doc_name |\n+----------+\n| Ved      |\n| Om       |\n+----------+\n2 rows in set (0.00 sec)\n\n\n4. Display the list of doctors whose exp is 20+ years.\n\nmysql> SELECT doc_name FROM Doctor WHERE exp > 20;\n+----------+\n| doc_name |\n+----------+\n| Soham    |\n| Pratik   |\n| Omkar    |\n| Sujal    |\n+----------+\n4 rows in set (0.00 sec)\n\n\n5. Display patients suffering from cancer.\n\nmysql> SELECT pat_name FROM Patient WHERE pat_id IN (SELECT pat_id FROM Treats WHERE disease = 'Cancer');\n+----------+\n| pat_name |\n+----------+\n| AAE      |\n| AAG      |\n| AAI      |\n+----------+\n3 rows in set (0.01 sec)\n\n\n6. Display the patient’s name and doctor name who are in cancer.\n\nmysql> SELECT\n    -> (SELECT pat_name FROM Patient WHERE pat_id = t.pat_id) AS patient_name,\n    -> (SELECT doc_name FROM Doctor WHERE doc_id = t.doc_id) AS doctor_name FROM Treats t WHERE disease = 'Cancer';\n+--------------+-------------+\n| patient_name | doctor_name |\n+--------------+-------------+\n| AAE          | Suhas       |\n| AAG          | Pratik      |\n| AAI          | Omkar       |\n+--------------+-------------+\n3 rows in set (0.00 sec)\n\n\n7. Display the patient name whose name starts with letter 'a’, end with 'a', having the exact 5 letters.\n\nmysql> SELECT pat_id,pat_name FROM Patient WHERE pat_name LIKE 'A%___%a';\n+--------+----------+\n| pat_id | pat_name |\n+--------+----------+\n| p11    | Amara    |\n| p12    | Alina    |\n| p13    | Anika    |\n+--------+----------+\n3 rows in set (0.00 sec)\n\n\n8. Remove of the records of patients with pat_id = p10.\n\nmysql> DELETE FROM Patient WHERE pat_id = 'p10';\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> SELECT * FROM Patient;\n+--------+----------+---------------+------+-----------+\n| pat_id | pat_name | date_of_admit | age  | city      |\n+--------+----------+---------------+------+-----------+\n| p1     | AAA      |          1999 |   25 | Pune      |\n| p11    | Amara    |          1999 |   25 | Mumbai    |\n| p12    | Alina    |          1998 |   30 | Pune      |\n| p13    | Anika    |          1997 |   35 | Delhi     |\n| p2     | AAB      |          1998 |   30 | Mumbai    |\n| p3     | AAC      |          1997 |   35 | Hyderabad |\n| p4     | AAD      |          1996 |   40 | Pune      |\n| p5     | AAE      |          1995 |   45 | Nashik    |\n| p6     | AAF      |          1994 |   50 | Delhi     |\n| p7     | AAG      |          1993 |   28 | Chennai   |\n| p8     | AAH      |          1992 |   33 | Hyderabad |\n| p9     | AAI      |          1991 |   38 | BANGALORE |\n+--------+----------+---------------+------+-----------+\n12 rows in set (0.00 sec)\n\n\n\n9. Remove all the records of doctor Suhas.\n\nmysql> DELETE FROM Doctor WHERE doc_name = 'Suhas';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT * FROM Doctor;\n\n\n+------+----------+-------------+-----+-------------+-----------+-------+\n|doc_id| doc_name |qualification| exp | dept        | city      |salary |\n+------+----------+-------------+-----+-------------+-----------+-------+\n| d101 | Shubham  | MBBS        |  10 | General     | Pune      | 12000 |\n| d102 | Shushant | PhD         |  15 | Accident    | Mumbai    | 14000 |\n| d103 | Ved      | MD          |   8 | Orthopedics | Hyderabad | 11000 |\n| d104 | Om       | MD          |  12 | Pediatrics  | Chennai   | 10000 |\n| d106 | Soham    | MBBS        |  23 | General     | Chennai   | 12000 |\n| d107 | Pratik   | PhD         |  25 | Accident    | Mumbai    | 14000 |\n| d108 | Vedant   | MD          |  13 | Orthopedics | Delhi     | 11000 |\n| d109 | Omkar    | MD          |  22 | Pediatrics  | Delhi     | 10000 |\n| d110 | Sujal    | PhD         |  27 | General     | Mumbai    | 15000 |\n+------+----------+-------------+-----+-------------+-----------+-------+\n9 rows in set (0.00 sec)\n\n\n10. Change the qualification of doctor Shubham from MBBS to MD.\n\nmysql> DELETE FROM Doctor WHERE doc_name = 'Suhas';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT * FROM Doctor;\n+------+----------+-------------+-----+-------------+-----------+-------+\n|doc_id| doc_name |qualification| exp | dept        | city      |salary |\n+------+----------+-------------+-----+-------------+-----------+-------+\n| d101 | Shubham  | MD          |  10 | General     | Pune      | 12000 |\n| d102 | Shushant | PhD         |  15 | Accident    | Mumbai    | 14000 |\n| d103 | Ved      | MD          |   8 | Orthopedics | Hyderabad | 11000 |\n| d104 | Om       | MD          |  12 | Pediatrics  | Chennai   | 10000 |\n| d106 | Soham    | MBBS        |  23 | General     | Chennai   | 12000 |\n| d107 | Pratik   | PhD         |  25 | Accident    | Mumbai    | 14000 |\n| d108 | Vedant   | MD          |  13 | Orthopedics | Delhi     | 11000 |\n| d109 | Omkar    | MD          |  22 | Pediatrics  | Delhi     | 10000 |\n| d110 | Sujal    | PhD         |  27 | General     | Mumbai    | 15000 |\n+------+----------+-------------+-----+-------------+-----------+-------+\n9 rows in set (0.00 sec)\n\n\n11. Give 5% salary raise to the Dentist and 10% to the Cardiologist in a single query.\n\nmysql> UPDATE Doctor\n    -> SET salary = salary * 1.05\n    -> WHERE dept = 'Dentist';\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2 Changed: 2 Warnings: 0\n\nmysql>\nmysql> UPDATE Doctor\n    -> SET salary = salary * 1.10\n    -> WHERE dept = 'Cardiology';\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2 Changed: 0 Warnings: 0\n\nmysql> SELECT doc_id, doc_name, dept, salary FROM Doctor;\n\n\n\n+--------+----------+-------------+--------+\n| doc_id | doc_name | dept        | salary |\n+--------+----------+-------------+--------+\n| d101   | Shubham  | General     |  12000 |\n| d102   | Shushant | Accident    |  14000 |\n| d103   | Ved      | Orthopedics |  11000 |\n| d104   | Om       | Pediatrics  |  10000 |\n| d106   | Soham    | General     |  12000 |\n| d107   | Pratik   | Accident    |  14000 |\n| d108   | Vedant   | Orthopedics |  11000 |\n| d109   | Omkar    | Pediatrics  |  10000 |\n| d110   | Sujal    | General     |  15000 |\n| d111   | Simran   | Cardiology  |  13200 |\n| d112   | Sarah    | Dentist     |  14700 |\n| d113   | Sankalp  | Orthopedics |  11000 |\n| d114   | Tanmay   | Dentist     |  10500 |\n| d115   | Deepak   | Cardiology  |  16500 |\n+--------+----------+-------------+--------+\n14 rows in set (0.00 sec)\n\n\n12. Display department wise total salary of the doctors.\n\nmysql> SELECT dept, SUM(salary) AS total_salary FROM Doctor\n    -> GROUP BY dept;\n+-------------+--------------+\n| dept        | total_salary |\n+-------------+--------------+\n| General     |        39000 |\n| Accident    |        28000 |\n| Orthopedics |        33000 |\n| Pediatrics  |        20000 |\n| Cardiology  |        29700 |\n| Dentist     |        25200 |\n+-------------+--------------+\n6 rows in set (0.01 sec)\n\n\n13. Find the department which has the highest average salary.\n\nmysql> SELECT dept\n    -> FROM Doctor\n    -> GROUP BY dept\n    -> HAVING AVG(salary) = (\n    ->     SELECT MAX(avg_salary)\n    ->     FROM (\n    ->         SELECT AVG(salary) AS avg_salary\n    ->         FROM Doctor\n    ->         GROUP BY dept\n    ->     ) AS avg_salaries\n    -> );\n+------------+\n| dept       |\n+------------+\n| Cardiology |\n+------------+\n1 row in set (0.01 sec)\n\n14. Find the average salary of doctors in Dentist Department.\n\nmysql> SELECT AVG(salary) AS avg_salary FROM Doctor WHERE dept = 'Dentist';\n+------------+\n| avg_salary |\n+------------+\n| 12600.0000 |\n+------------+\n1 row in set (0.00 sec)\n\n\n15. Find the department where average salary doctor is more than 50,000.\n\nmysql> SELECT dept\n    -> FROM Doctor\n    -> GROUP BY dept HAVING AVG(salary) > 50000;\nEmpty set (0.00 sec)\n\n\n16. Find how many doctors work in hospital.\n\nmysql> SELECT COUNT(doc_name) AS Total_no_of_Doctors FROM Doctor;\n+---------------------+\n| Total_no_of_Doctors |\n+---------------------+\n|                  14 |\n+---------------------+\n1 row in set (0.00 sec) \n\n\n17. Find out how many doctors actually treated a patient.\n\nmysql> SELECT COUNT(DISTINCT doc_id) AS num_doctors FROM Treats;\n+-------------+\n| num_doctors |\n+-------------+\n|           9 |\n+-------------+\n1 row in set (0.00 sec)\n\n\n18. List the cities in which either doctors or patient lives.\n\nmysql> SELECT city FROM Doctor UNION SELECT city FROM Patient;\n+-----------+\n| city      |\n+-----------+\n| Pune      |\n| Mumbai    |\n| Hyderabad |\n| Chennai   |\n| Delhi     |\n| Kolkata   |\n| Nashik    |\n| BANGALORE |\n+-----------+\n8 rows in set (0.00 sec)\n\n19. List the cities where both live.\n\nmysql> SELECT city FROM Doctor INTERSECT SELECT city FROM Patient;\n+-----------+\n| city      |\n+-----------+\n| Pune      |\n| Mumbai    |\n| Hyderabad |\n| Chennai   |\n| Delhi     |\n+-----------+\n5 rows in set (0.00 sec)\n\n\n20. List doctor name patient name and their cities name if they live in same city.\n\nmysql> SELECT d.doc_name AS doctors, p.pat_name AS patients, d.city AS city FROM Doctor d, Patient p WHERE d.city = p.city;\n+----------+----------+-----------+\n| doctors  | patients | city      |\n+----------+----------+-----------+\n| Shubham  | AAD      | Pune      |\n| Shubham  | Alina    | Pune      |\n| Shubham  | AAA      | Pune      |\n| Shushant | AAB      | Mumbai    |\n| Shushant | Amara    | Mumbai    |\n| Ved      | AAH      | Hyderabad |\n| Ved      | AAC      | Hyderabad |\n| Om       | AAG      | Chennai   |\n| Soham    | AAG      | Chennai   |\n| Pratik   | AAB      | Mumbai    |\n| Pratik   | Amara    | Mumbai    |\n| Vedant   | AAF      | Delhi     |\n| Vedant   | Anika    | Delhi     |\n| Omkar    | AAF      | Delhi     |\n| Omkar    | Anika    | Delhi     |\n| Sujal    | AAB      | Mumbai    |\n| Sujal    | Amara    | Mumbai    |\n| Simran   | AAD      | Pune      |\n| Simran   | Alina    | Pune      |\n| Simran   | AAA      | Pune      |\n| Sarah    | AAB      | Mumbai    |\n| Sarah    | Amara    | Mumbai    |\n| Sankalp  | AAH      | Hyderabad |\n| Sankalp  | AAC      | Hyderabad |\n| Tanmay   | AAG      | Chennai   |\n+----------+----------+-----------+\n25 rows in set (0.00 sec)\n\n\n21. Find the doctors who have not treated any patient.\n\nmysql> SELECT doc_id, doc_name\n    -> FROM Doctor\n    -> WHERE doc_id NOT IN (SELECT DISTINCT doc_id FROM Treats);\n+--------+----------+\n| doc_id | doc_name |\n+--------+----------+\n| d111   | Simran   |\n| d112   | Sarah    |\n| d113   | Sankalp  |\n| d114   | Tanmay   |\n| d115   | Deepak   |\n+--------+----------+\n5 rows in set (0.00 sec)\n\n22 a. Display name of doctors and patients as a single column.\n\nmysql> SELECT doc_name AS name FROM Doctor UNION\n    -> SELECT pat_name AS name FROM Patient;\n+----------+\n| name     |\n+----------+\n| Shubham  |\n| Shushant |\n| Ved      |\n| Om       |\n| Soham    |\n| Pratik   |\n| Vedant   |\n| Omkar    |\n| Sujal    |\n| Simran   |\n| Sarah    |\n| Sankalp  |\n| Tanmay   |\n| Deepak   |\n| AAA      |\n| Amara    |\n| Alina    |\n| Anika    |\n| AAB      |\n| AAC      |\n| AAD      |\n| AAE      |\n| AAF      |\n| AAG      |\n| AAH      |\n| AAI      |\n+----------+\n26 rows in set (0.00 sec)\n\n   b. Let duplicate name appear many times.\n\nmysql> SELECT doc_name AS name FROM Doctor UNION ALL\n    -> SELECT pat_name AS name FROM Patient;\n+----------+\n| name     |\n+----------+\n| Shubham  |\n| Shushant |\n| Ved      |\n| Om       |\n| Om       |\n| Soham    |\n| Pratik   |\n| Vedant   |\n| Omkar    |\n| Sujal    |\n| Simran   |\n| Sarah    |\n| Sankalp  |\n| Tanmay   |\n| Deepak   |\n| AAA      |\n| Amara    |\n| Alina    |\n| Anika    |\n| Amara    |\n| AAB      |\n| AAB      |\n| AAC      |\n| AAC      |\n| AAD      |\n| AAE      |\n| AAF      |\n| AAG      |\n| AAH      |\n| AAI      |\n+----------+\n30 rows in set (0.00 sec)\n\n\n23. What is the total money collected so far from treatment of patients.\n\nmysql> ALTER TABLE Treats ADD treatment_cost DECIMAL(10, 2);\nQuery OK, 0 rows affected (0.03 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SELECT SUM(treatment_cost) AS Total_Cost FROM Treats;\n+------------+\n| Total_Cost |\n+------------+\n|   29800.00 |\n+------------+\n1 row in set (0.00 sec)\n \n24. Find average salary of each department.\n\nmysql> SELECT dept, AVG(salary) AS Avg_Salary FROM Doctor GROUP BY dept;\n+-------------+------------+\n| dept        | Avg_Salary |\n+-------------+------------+\n| General     | 13000.0000 |\n| Accident    | 14000.0000 |\n| Orthopedics | 11000.0000 |\n| Pediatrics  | 10000.0000 |\n| Cardiology  | 14850.0000 |\n| Dentist     | 12600.0000 |\n+-------------+------------+\n6 rows in set (0.00 sec)\n\n25. Display patient which does not have email id.\n\nmysql> ALTER TABLE Patient ADD COLUMN email varchar(50);\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SELECT * FROM Patient WHERE email IS NULL;\n+--------+----------+---------------+------+-----------+-------+\n| pat_id | pat_name | date_of_admit | age  | city      | email |\n+--------+----------+---------------+------+-----------+-------+\n| p19    | AAB      |          1998 |   30 | Pune      | NULL  |\n| p2     | AAB      |          1998 |   30 | Mumbai    | NULL  |\n| p20    | AAC      |          1997 |   35 | Delhi     | NULL  |\n| p5     | AAE      |          1995 |   45 | Nashik    | NULL  |\n| p6     | AAF      |          1994 |   50 | Delhi     | NULL  |\n| p7     | AAG      |          1993 |   28 | Chennai   | NULL  |\n| p8     | AAH      |          1992 |   33 | Hyderabad | NULL  |\n+--------+----------+---------------+------+-----------+-------+\n7 rows in set (0.00 sec)\n\n\n\n\"\"\"\n_3 = \"\"\"\n\n\nASSIGNMENT N0 – 3			\n\nTitle : SQL Queries - all types of Join, Sub-Query and View: Write at least 10 SQL queries for suitable database application using SQL DML statements.\n\n----------------------------------------------------------------\nCreate a Bank database with following tables.\n\n\n1. Branch_master(branch_id, branch_name)\n\nmysql> CREATE TABLE Branch_master (branch_id INT PRIMARY KEY, branch_name VARCHAR(25));\nQuery OK, 0 rows affected (0.04 sec)\n\n\n2. Employee_master(emp_no, emp_name, branch_id, salary, department, manager_id)\n\nmysql> CREATE TABLE Employee_master(emp_no INT PRIMARY KEY,emp_name VARCHAR(25),branch_id INT,salary DECIMAL(10,2),department VARCHAR(20),manager_id INT,FOREIGN KEY(branch_id) REFERENCES Branch_master(branch_id),FOREIGN KEY(manager_id) REFERENCES Employee_master(emp_no));\nQuery OK, 0 rows affected (0.03 sec)\n\n\n3. Contact_details(emp_id, email_id, phone_no)\n\nmysql> CREATE TABLE Contact_details (emp_id INT,email_id VARCHAR(25),phone_no INT,FOREIGN KEY (emp_id) REFERENCES Employee_master(emp_no) ON DELETE SET NULL);\nQuery OK, 0 rows affected (0.01 sec)\n\n\n4. Employee_address_details(emp_id, street, city, state)\n\nmysql> CREATE TABLE Employee_address_details (emp_id INT,street VARCHAR(255),city VARCHAR(255),state VARCHAR(255),FOREIGN KEY (emp_id) REFERENCES Employee_master(emp_no) ON DELETE CASCADE);\nQuery OK, 0 rows affected (0.02 sec) \n\n5. Branch_address(branch_id, city, sate)\n\nmysql> CREATE TABLE Branch_address (branch_id INT,city VARCHAR(255),state VARCHAR(255),FOREIGN KEY (branch_id) REFERENCES Branch_master(branch_id));\nQuery OK, 0 rows affected (0.02 sec)\n\nQueries:\n\n1. Insert 5 records in each table.\n\nmysql> INSERT INTO Branch_master (branch_id, branch_name) VALUES\n       (1, 'Ambegaon'),\n       (2, 'Vadgaon'),\n       (3, 'Narhe'),\n       (4, 'Kothrud'),\n       (5, 'Warje');\nQuery OK, 5 rows affected (0.00 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> INSERT INTO Employee_master (emp_no, emp_name, branch_id, salary, department, manager_id)\n        VALUES\n       (101, 'Ved', 1, 50000.00, 'Manager', NULL),\n       (102, 'Om', 2, 55000.00, 'HR', 101),\n       (103, 'Kaustubh', 3, 60000.00, 'Finance', 101),\n       (104, 'Ganesh', 4, 52000.00, 'Marketing', 101),\n       (105, 'Piyush', 5, 48000.00, 'Operations', 101);\nQuery OK, 5 rows affected (0.00 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> INSERT INTO Contact_details (emp_id, email_id, phone_no)\n     VALUES\n     (101, 'ved@example.com', '1234567'),\n     (102, 'om@example.com', '2345678'),\n     (103, 'kaustya@example.com', '3456789'),\n     (104, 'ganya@example.com', '4567890'),\n     (105, 'piyush@example.com', '5678901');\nQuery OK, 5 rows affected (0.00 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> INSERT INTO Employee_address_details (emp_id, street, city, state)\n     VALUES\n         (101, '123 Street', 'Mumbai', 'Maharashtra'),\n         (102, '456 Avenue', 'Delhi', 'Delhi'),\n       (103, '789 Road', 'Bangalore', 'Karnataka'),\n         (104, '101 Lane', 'Chennai', 'Tamil Nadu'),\n         (105, '202 Drive', 'Kolkata', 'West Bengal');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> INSERT INTO Branch_address (branch_id, city, state)\n     VALUES\n         (1, 'Pune', 'Maharashtra'),\n         (2, 'Delhi', 'Delhi'),\n         (3, 'Bangalore', 'Karnataka'),\n         (4, 'Pune', 'Maharashtra'),\n         (5, 'Kolkata', 'West Bengal');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\n\n2. List the employee details along with branch name using the inner join and in the order of employee no.\n\nmysql> SELECT Employee_master.emp_no, emp_name, branch_name\n    FROM Employee_master\n     INNER JOIN Branch_master ON Employee_master.branch_id = Branch_master.branch_id\n     ORDER BY Employee_master.emp_no;\n+--------+----------+-------------+\n| emp_no | emp_name | branch_name |\n+--------+----------+-------------+\n|    101 | Ved      | Ambegaon    |\n|    102 | Om       | Vadgaon     |\n|    103 | Kaustubh | Narhe       |\n|    104 | Ganesh   | Kothrud     |\n|    105 | Piyush   | Warje       |\n+--------+----------+-------------+\n5 rows in set (0.00 sec)\n\n\n3. List the details of employee who belong to admin department along with the branch name to which they belong.\n\nmysql> SELECT Employee_master.emp_no, emp_name, branch_name\n     FROM Employee_master\n     INNER JOIN Branch_master ON Employee_master.branch_id = Branch_master.branch_id\n     WHERE department = 'Admin';\n+--------+----------+-------------+\n| emp_no | emp_name | branch_name |\n+--------+----------+-------------+\n|    102 | Om       | Vadgaon     |\n|    105 | Piyush   | Warje       |\n+--------+----------+-------------+\n2 rows in set (0.00 sec)\n\n\n4. List the employee name along with the phone number and city using inner join.\n\nmysql> SELECT em.emp_name, cd.phone_no, ead.city\n     FROM Employee_master em\n     INNER JOIN Contact_details cd ON em.emp_no = cd.emp_id\n     INNER JOIN Employee_address_details ead ON em.emp_no = ead.emp_id;\n\n\n+----------+----------+-----------+\n| emp_name | phone_no | city      |\n+----------+----------+-----------+\n| Ved      |  1234567 | Mumbai    |\n| Om       |  2345678 | Delhi     |\n| Kaustubh |  3456789 | Bangalore |\n| Ganesh   |  4567890 | Chennai   |\n| Piyush   |  5678901 | Kolkata   |\n+----------+----------+-----------+\n5 rows in set (0.00 sec)\n\n5. List the employee name with the contact details(if any).\n\nmysql> SELECT em.emp_name, cd.email_id, cd.phone_no\n     FROM Employee_master em\n     LEFT JOIN Contact_details cd ON em.emp_no = cd.emp_id;\n+----------+---------------------+----------+\n| emp_name | email_id            | phone_no |\n+----------+---------------------+----------+\n| Ved      | ved@example.com     |  1234567 |\n| Om       | om@example.com      |  2345678 |\n| Kaustubh | kaustya@example.com |  3456789 |\n| Ganesh   | ganya@example.com   |  4567890 |\n| Piyush   | piyush@example.com  |  5678901 |\n+----------+---------------------+----------+\n5 rows in set (0.00 sec)\n\n6. List the employee contact details irrespective of whether they are working or left.\n\nmysql> SELECT em.emp_name, cd.email_id, cd.phone_no\n     FROM Employee_master em\n     LEFT JOIN Contact_details cd ON em.emp_no = cd.emp_id;\n+----------+---------------------+----------+\n| emp_name | email_id            | phone_no |\n+----------+---------------------+----------+\n| Ved      | ved@example.com     |  1234567 |\n| Om       | om@example.com      |  2345678 |\n| Kaustubh | kaustya@example.com |  3456789 |\n| Ganesh   | ganya@example.com   |  4567890 |\n| Piyush   | piyush@example.com  |  5678901 |\n+----------+---------------------+----------+\n5 rows in set (0.00 sec)\n\n7. Retrieve the employee’s name and their respective manager’s name.\n\nmysql> SELECT e1.emp_name,e2.emp_name AS Manager FROM Employee_master e1, Employee_master e2 WHERE e1.manager_id = e2.emp_no;\n+----------+---------+\n| emp_name | Manager |\n+----------+---------+\n| Om       | Ved     |\n| Kaustubh | Ved     |\n| Ganesh   | Ved     |\n| Piyush   | Ved     |\n+----------+---------+\n4 rows in set (0.00 sec)\n\n8. List the employee details along with the branch name by using natural join.\n\nmysql> SELECT Employee_master.emp_no, emp_name, branch_name\n     FROM Employee_master\n     INNER JOIN Branch_master ON Employee_master.branch_id = Branch_master.branch_id;\n+--------+----------+-------------+\n| emp_no | emp_name | branch_name |\n+--------+----------+-------------+\n|    101 | Ved      | Ambegaon    |\n|    102 | Om       | Vadgaon     |\n|    103 | Kaustubh | Narhe       |\n|    104 | Ganesh   | Kothrud     |\n|    105 | Piyush   | Warje       |\n+--------+----------+-------------+\n5 rows in set (0.00 sec)\n\n\n9. List the employee names who work at the Vadgaon branch along with the city of that employee.\n\nSELECT Employee_master.emp_name, Employee_address_details.city\n     FROM Employee_master\n    JOIN Employee_address_details ON Employee_master.emp_no = Employee_address_details.emp_id\n     JOIN Branch_master ON Employee_master.branch_id = Branch_master.branch_id\n     WHERE Branch_master.branch_name = 'Vadgaon';\n+----------+-------+\n| emp_name | city  |\n+----------+-------+\n| Om       | Delhi |\n+----------+-------+\n1 row in set (0.00 sec)\n\n\n10. Find the employee who works at the Vadgaon branch with salary greater than 10000 and list the employee names with streets and city they live in.\n\nmysql> SELECT Employee_master.emp_name, Employee_address_details.street, Employee_address_details.city\n     FROM Employee_master\n     JOIN Employee_address_details ON Employee_master.emp_no = Employee_address_details.emp_id\n    JOIN Branch_master ON Employee_master.branch_id = Branch_master.branch_id\n     WHERE Branch_master.branch_name = 'Vadgaon'\n     AND Employee_master.salary > 10000;\n+----------+------------+-------+\n| emp_name | street     | city  |\n+----------+------------+-------+\n| Om       | 456 Avenue | Delhi |\n+----------+------------+-------+\n1 row in set (0.00 sec)\n\n\n11. Find the employees who live and work in same city.\n\nmysql> SELECT Employee_master.emp_name, Employee_address_details.city AS work_city, Address.city AS residence_city\n     FROM Employee_master\n     JOIN Employee_address_details ON Employee_master.emp_no = Employee_address_details.emp_id\n     JOIN Employee_address_details AS Address ON Employee_master.emp_no = Address.emp_id\n     WHERE Employee_address_details.city = Address.city;\n+----------+-----------+----------------+\n| emp_name | work_city | residence_city |\n+----------+-----------+----------------+\n| Ved      | Mumbai    | Mumbai         |\n| Om       | Delhi     | Delhi          |\n| Kaustubh | Bangalore | Bangalore      |\n| Ganesh   | Chennai   | Chennai        |\n| Piyush   | Kolkata   | Kolkata        |\n+----------+-----------+----------------+\n5 rows in set (0.00 sec)\n\n\n12. Find the employees whoose salaries are more than everybody who works at branch vadgaon.\n\nmysql> SELECT emp_name, salary\n     FROM Employee_master\n     WHERE salary > ALL (\n         SELECT salary\n        FROM Employee_master\n         WHERE branch_id = (\n             SELECT branch_id\n             FROM Branch_master\n             WHERE branch_name = 'Vadgaon'\n         )\n     );\n+----------+----------+\n| emp_name | salary   |\n+----------+----------+\n| Kaustubh | 60000.00 |\n+----------+----------+\n1 row in set (0.00 sec)\n\n\n13. Create a view which will contain total employees at each branch.\n\nmysql> CREATE VIEW Total_Employees_At_Branch AS\n     SELECT Branch_master.branch_id, branch_name, COUNT(Employee_master.emp_no) AS total_employees\n     FROM Branch_master\n     LEFT JOIN Employee_master ON Branch_master.branch_id = Employee_master.branch_id\n     GROUP BY Branch_master.branch_id, branch_name;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT * FROM Total_Employees_At_Branch;\n\n\n+-----------+-------------+-----------------+\n| branch_id | branch_name | total_employees |\n+-----------+-------------+-----------------+\n|         1 | Ambegaon    |               1 |\n|         2 | Vadgaon     |               1 |\n|         3 | Narhe       |               1 |\n|         4 | Kothrud     |               1 |\n|         5 | Warje       |               1 |\n+-----------+-------------+-----------------+\n5 rows in set (0.00 sec)\n\n\n\n14. List the branch names where employee have salary greater than 1 Lakh.\n\nmysql> SELECT DISTINCT Branch_master.branch_name\n     FROM Employee_master\n     JOIN Branch_master ON Employee_master.branch_id = Branch_master.branch_id\n     WHERE Employee_master.salary > 100000;\n+-------------+\n| branch_name |\n+-------------+\n| Ambegaon    |\n| Vadgaon     |\n| Narhe       |\n| Warje       |\n+-------------+\n\n4 rows in set (0.00 sec)\n\n\n15. Create a view which will show the average salary and the total salary at each branch .\n\nmysql> CREATE VIEW Branch_Salary_Info AS\n     SELECT\n         branch_id,\n        AVG(salary) AS avg_salary,\n        SUM(salary) AS total_salary\n     FROM Employee_master\n     GROUP BY branch_id;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT * FROM Branch_Salary_Info;\n+-----------+---------------+--------------+\n| branch_id | avg_salary    | total_salary |\n+-----------+---------------+--------------+\n|         1 | 100000.000000 |    200000.00 |\n|         2 | 105000.000000 |    210000.00 |\n|         3 | 110000.000000 |    220000.00 |\n|         4 |  52000.000000 |    104000.00 |\n|         5 |  98000.000000 |    196000.00 |\n+-----------+---------------+--------------+\n5 rows in set (0.00 sec)\n\n\n\n\n\n16. Find the employee who do not have a job at Vadgaon branch.\n\nmysql> SELECT emp_name\n     FROM Employee_master\n     WHERE branch_id <> (\n         SELECT branch_id\n         FROM Branch_master\n         WHERE branch_name = 'Vadgaon'\n     );\n+----------------+\n| emp_name       |\n+----------------+\n| Ved            |\n| John Doe       |\n| Kaustubh       |\n| Bob Johnson    |\n| Ganesh         |\n| Sarah Williams |\n| Piyush         |\n| Michael Davis  |\n+----------------+\n8 rows in set (0.00 sec)\n\n\n\"\"\"\n_4 = \"\"\"\nCREATE TABLE Borrower (Rollno int,Name varchar(100),DateOfIssue Date,NameOfBook varchar(100),Status varchar(1));\n\nDesc Borrower;\n\nINSERT INTO Borrower Values(101,'Ajay','01-JAN-2023','To kill a mockingbird','I');\nINSERT INTO Borrower Values(102,'Om','09-AUG-2023','War and Peace','I');\nINSERT INTO Borrower Values(103,'Ayush','01-OCT-2023','Great Expectations','I');\n\nCREATE TABLE Fine(Rollno int,IRdate Date,Amt float);\n\nDesc Fine;\n\nDECLARE\n  DOI Borrower.DateOfIssue%TYPE;\n  bkname Borrower.NameOfBook%TYPE := 'Great Expectations';\n  rno Borrower.Rollno%TYPE := 103;\n  fine FLOAT;\n  date_diff INT;\n  invalid_rno EXCEPTION;\n\nBEGIN\n  IF rno <= 0 THEN\n    RAISE invalid_rno;\n  END IF;\n\n  -- Using TO_DATE to ensure correct date format\n  SELECT DateOfIssue INTO DOI FROM (\n    SELECT DateOfIssue\n    FROM Borrower\n    WHERE NameOfBook = bkname AND Rollno = rno\n    ORDER BY DateOfIssue DESC -- Add an ORDER BY clause to ensure only one row is fetched\n  ) WHERE ROWNUM = 1;\n\n  -- Calculating date difference in days\n  date_diff := TRUNC(SYSDATE) - TRUNC(DOI);\n\n  IF date_diff > 15 AND date_diff <= 30 THEN\n    fine := (date_diff - 15) * 5;\n  ELSIF date_diff > 30 THEN\n    fine := (15 * 5) + ((date_diff - 30) * 50);\n  ELSE\n    fine := 0;\n  END IF;\n\n  IF fine > 0 THEN\n    INSERT INTO Fine VALUES (rno, SYSDATE, fine);\n  END IF;\n\n  UPDATE Borrower\n  SET Status = 'R'\n  WHERE Rollno = rno AND NameOfBook = bkname;\n\n  DBMS_OUTPUT.PUT_LINE('Fine calculated and borrower status updated successfully.');\n\nEXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    DBMS_OUTPUT.PUT_LINE('Book or borrower not found.');\n  WHEN invalid_rno THEN\n    DBMS_OUTPUT.PUT_LINE('Invalid RollNo');\n  WHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND;\n/\nselect * from Fine\n\"\"\"\n_5 = \"\"\"\n\nAssignment No – 5      \nTitle: PL/SQL Stored Procedure and Stored Function.\n\nProblem Statement: Write a stored procedure namely procedure_grade for the categorization of the student if marks scored by the student in examination is <=1500 and marks>=990 then student will be placed in distinction category.If marks scored are between 989 and 900 then category is 1st class,if marks are between 899 and 825 then category is higher 2nd class.\n----------------------------------------------------------------\n1. Write a PL/SQL block to use the procedure created with the above requirement. Insert the data in both the tables by calling the above procedure. \n\nCreate Table: \n\n1. Stud_Marks(name, total_marks).\n\nmysql>CREATE TABLE stud_marks (Roll_No INT PRIMARY KEY,Name VARCHAR(50),Class VARCHAR(50));\n\nmysql>DESC stud_marks;\n\n+---------+--------------+------+-----+---------+-------+\n| Field   | Type         | Null | Key | Default | Extra |\n+---------+--------------+------+-----+---------+-------+\n| Roll_No | INT          | NO   | PRI | NULL    |       |\n| Name    | VARCHAR(50)  | YES  |     | NULL    |       |\n| Class   | VARCHAR(50)  | YES  |     | NULL    |       |\n+---------+--------------+------+-----+---------+-------+\n\n2. Result(Roll,Name, Class)\n\nmysql>CREATE TABLE result (Name VARCHAR(50),TotalMarks INT);\n\nmysql>DESC result;\n\n+------------+------------+------+-----+---------+-------+\n|   Field    |    Type    | Null | Key | Default | Extra |\n+------------+------------+------+-----+---------+-------+\n|    Name    | VARCHAR(50)| YES  |     |  NULL   |       |\n|    Marks   |    INT     | YES  |     |  NULL   |       |\n+------------+------------+------+-----+---------+-------+\n\ndelimiter //\nCREATE PROCEDURE proc_grade(IN rollno TINYINT, IN name VARCHAR(15), IN marks INT)\nBEGIN\n    DECLARE class VARCHAR(25);\n\n    IF marks >= 990 AND marks <= 1500 THEN\n        SET class = "Distinction";\n    ELSEIF marks <= 989 AND marks >= 900 THEN\n        SET class = "First Class";\n    ELSEIF marks <= 899 AND marks >= 825 THEN\n        SET class = "Second Class";\n    ELSEIF marks <= 824 AND marks >= 700 THEN\n        SET class = "Pass";\n    ELSE\n        SET class = "Fail";\n    END IF;\n\n     INSERT INTO stud_marks VALUES (rollno, name, class); \n   INSERT INTO result VALUES (name, marks); \nEND //\n\nDELIMITER //\nCREATE FUNCTION total_count() RETURNS INT\nDETERMINISTIC\nBEGIN\n    DECLARE count_result INT;\n    SELECT COUNT(Roll) INTO count_result FROM Result;\n    RETURN count_result;\nEND //\n\nDELIMITER ;\n\nmysql> call proc_grade(1,'Aryan',850);\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> call proc_grade(2,'Peter',1000);\nQuery OK, 1 row affected (0.06 sec)\n;\nmysql> call proc_grade(3,'Smith',834);\nQuery OK, 1 row affected (0.07 sec)\n\nmysql> call proc_grade(4,'Carol',750);\nQuery OK, 1 row affected (0.07 sec)\n\nmysql> call proc_grade(5,'Bob',950);\nQuery OK, 1 row affected (0.07 sec)\n\nmysql> call proc_grade(6,'Sam',650);\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> SELECT * FROm result;\n\n+---------+-------+--------------+\n| Roll_No | Name  |   Class      |\n+---------+-------+--------------+\n|    1    | Aryan | Second Class |\n|    2    | Peter | Distinction  |\n|    3    | Smith | Second Class |\n|    4    | Carol | Pass         |\n|    5    |  Bob  | First Class  |\n|    6    |  Sam  | Fail         |\n+---------+-------+--------------+\n6 rows in set (0.00 sec)\n\nmysql> SELECT * FROM stud_marks;\n\n+-------+------------+\n|  Name | TotalMarks |\n+-------+------------+\n| Aryan |        850 |\n| Peter |       1000 |\n| Smith |        834 |\n| Carol |        750 |\n|   Bob |        950 |\n|   Sam |        650 |\n+-------+------------+\n6 rows in set (0.00 sec)\n\n2. Write a function which will return the total students in a given class\n\nmysql> DELIMITER //\nCREATE FUNCTION tot_stud(classname VARCHAR(25)) \nRETURNS INT \nDETERMINISTIC\nBEGIN \nDECLARE total INT(20); \nSELECT DISTINCT COUNT(*) INTO total FROM result WHERE Class = classname; \nRETURN total; \nEND //\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> DELIMITER ;\n\nmysql> SELECT tot_stud("Second Class");\n+--------------------------+\n| tot_stud("Second Class") |\n+--------------------------+\n|                        2 |\n+--------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT tot_stud("Pass");\n+------------------+\n| tot_stud("Pass") |\n+------------------+\n|                1 |\n+------------------+\n1 row in set (0.00 sec)\n\n\"\"\"\n_6 = \"\"\"\n\nAssignment No – 6   \n\nTitle: Cursors: (All types: Implicit, Explicit, Cursor FOR Loop, Parameterized Cursor).\n\nProblem Statement: Write a PL/SQL block to create a cursor to copy contents of one table into another. Avoid redundancy. Write a PL/SQL block of code using parameterized Cursor, that will merge the data available in the newly created table N_RollCall with the data available in the table O_RollCall. If the data in the first table already exists in the second table then that data should be skipped.\n----------------------------------------------------------------\n\nSQL> CREATE TABLE O_RollCall (rn int, name varchar(25), marks int)\n\nTable created.\n\nSQL> DESC O_RollCall\n\nTABLE O_ROLLCALL\n+--------+-------+-------------+\n| Column | Null? | Type        |\n|--------|-------|-------------|\n| RN     |   -   | NUMBER      |\n| NAME   |   -   | VARCHAR2(25)|\n| MARKS  |   -   | NUMBER      |\n+------------------------------+\n\nSQL> INSERT INTO O_ROllCall VALUES(1, 'AAA', 38)\n\n1 row(s) inserted.\n\nSQL> INSERT INTO O_RollCall VALUES(3, 'CCC', 45)\n\n1 row(s) inserted.\n\nSQL> INSERT INTO O_RollCall VALUES(5, 'EEE', 41)\n\n1 row(s) inserted.\n\nSQL> INSERT INTO O_RollCall VALUES(7, 'GGG', 36)\n\n1 row(s) inserted.\n\nSQL> SELECT * FROM O_RollCall\n+----+------+-------+\n| RN | NAME | MARKS |\n|----|------|-------|\n| 3  | CCC  |  45   |\n| 5  | EEE  |  41   |\n| 1  | AAA  |  38   |\n| 7  | GGG  |  36   |\n+----+------+-------+\n4 rows selected.\n\nSQL> CREATE TABLE N_RollCall(rn int, name varchar(25), marks int)\n\nTable created.\n\nSQL> DESC N_RollCall\n\nTABLE N_ROLLCALL\n+--------+-------+-------------+\n| Column | Null? | Type        |\n|--------|-------|-------------|\n| RN     |   -   | NUMBER      |\n| NAME   |   -   | VARCHAR2(25)|\n| MARKS  |   -   | NUMBER      |\n+------------------------------+\n\nSQL> INSERT INTO N_RollCall VALUES(2, 'BBB', 43)\n\n1 row(s) inserted.\n\nSQL> INSERT INTO N_RollCall VALUES(4, 'DDD', 44)\n\n1 row(s) inserted.\n\nSQL> INSERT INTO N_RollCall VALUES(6, 'FFF', 41)\n\n1 row(s) inserted.\n\nSQL> INSERT INTO N_RollCall VALUES(8, 'HHH', 49)\n\n1 row(s) inserted.\n\nSQL> SELECT * FROM N_RollCall\n\n+-------------------+\n| RN | NAME | MARKS |\n|----|------|-------|\n| 4  | DDD  |  44   |\n| 2  | BBB  |  43   |\n| 8  | HHH  |  49   |\n| 6  | FFF  |  41   |\n+-------------------+\n4 rows selected.\n\nSQL> BEGIN\n       UPDATE O_RollCall SET marks = 40 WHERE (marks BETWEEN 35 AND 39);\n       IF sql%NOTFOUND THEN\n         dbms_output.put_line('No Record Found');\n       ELSE \n         dbms_output.put_line(sql%ROWCOUNT || 'Record Found');\n       END IF;\n      END;\n\nStatement processed.\n\n2 Record Found\n\n\n\n\nSQL> DECLARE\n      CURSOR Cur_O IS SELECT * FROM O_RollCall;\n      CURSOR Cur_N(rn_o int) IS SELECT * FROM N_RollCall WHERE rn = rn_o;\n      s_rec N_RollCall%rowtype;\n     BEGIN \n       FOR s_rec in Cur_O LOOP\n         OPEN Cur_N(s_rec.rn);\n         FETCH Cur_N into s_rec;\n\n     IF Cur_N%NOTFOUND THEN\n       INSERT INTO N_RollCall VALUES(s_rec.rn, s_rec.name, s_rec.marks);\n     END IF;\n     CLOSE Cur_N;\n   END LOOP;\nEND;\n\nStatement processed.\n\nSQL> SELECT * FROM N_RollCall ORDER BY(rn)\n\n+-------------------+\n| RN | NAME | MARKS |\n|----|------|-------|\n| 1  | AAA  |  40   |\n| 2  | BBB  |  43   |\n| 3  | CCC  |  45   |\n| 4  | DDD  |  44   |\n| 5  | EEE  |  41   |\n| 6  | FFF  |  41   |\n| 7  | GGG  |  40   |\n| 8  | HHH  |  49   |\n+-------------------+\n8 rows selected.\n\n\"\"\"\n_7 = \"\"\"\nAssignment No – 7      \n\nTitle: Design the Database Trigger For All Types Row Level and Statement Level: Write a database trigger on the Library table. The System should keep track of the records that are being updated or deleted. The old value of updated or deleted records should be added in the Library_Audit table.\n----------------------------------------------------------------\n1. Library Table(B_id, title, author varchar(20), edition, no_of_copies)\n\nmysql> CREATE TABLE library(B_id int,title varchar (20), authors varchar(20), edition int, no_of_copies int);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> desc library;\n+--------------+-------------+------+-----+---------+-------+\n| Field        | Type        | Null | Key | Default | Extra |\n+--------------+-------------+------+-----+---------+-------+\n| B_id         | int         | YES  |     | NULL    |       |\n| title        | varchar(20) | YES  |     | NULL    |       |\n| authors      | varchar(20) | YES  |     | NULL    |       |\n| edition      | int         | YES  |     | NULL    |       |\n| no_of_copies | int         | YES  |     | NULL    |       |\n+--------------+-------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n\n\n2. Library_Audit Table(B_id, title, edition, no_of_copies, date_of_mod, type of operation, user who performed the operation)\n\nmysql> CREATE TABLE lib_audit(B_id int, title varchar(20), edition int, no_of_copies int, date_of_mod datetime, type_of_op varchar(20), username varchar(20));\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> desc lib_audit;\n+--------------+-------------+------+-----+---------+-------+\n| Field        | Type        | Null | Key | Default | Extra |\n+--------------+-------------+------+-----+---------+-------+\n| B_id         | int         | YES  |     | NULL    |       |\n| title        | varchar(20) | YES  |     | NULL    |       |\n| edition      | int         | YES  |     | NULL    |       |\n| no_of_copies | int         | YES  |     | NULL    |       |\n| date_of_mod  | datetime    | YES  |     | NULL    |       |\n| type_of_op   | varchar(20) | YES  |     | NULL    |       |\n| username     | varchar(20) | YES  |     | NULL    |       |\n+--------------+-------------+------+-----+---------+-------+\n7 rows in set (0.00 sec)\n\n\n3. Transaction Table(Transaction_id, B_id, Issue or return, no of copies issued or return)\n\nmysql> CREATE TABLE transaction (t_id int, B_id int, i_r varchar(10), no_of_copies int);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> DESC transaction;\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| t_id    | int         | YES  |     | NULL    |       |\n| B_id    | int         | YES  |     | NULL    |       |\n| i_r     | varchar(10) | YES  |     | NULL    |       |\n| no_of_c | int         | YES  |     | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\nmysql> INSERT INTO library VALUES\n          (1, "TOC", "V.V.Richard", 2, 4),\n          (2, "CN", "Forouzan", 4, 5),\n         (3, "ISEE", "Rahul De", 3, 5),\n          (4, "DBMS", "Silberschatz", 3, 2),\n          (5, "SEPM", "Pressman", 5, 6);\nQuery OK, 5 rows affected (0.00 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\nmysql> select * from library;\n+------+-------+--------------+---------+--------------+\n| B_id | title | author       | edition | no_of_copies |\n+------+-------+--------------+---------+--------------+\n|    1 | TOC   | V.V.Richard  |       2 |            4 |\n|    2 | CN    | Forouzan     |       4 |            5 |\n|    3 | ISEE  | Rahul De     |       3 |            5 |\n|    4 | DBMS  | Silberschatz |       3 |            2 |\n|    5 | SEPM  | Pressman     |       5 |            6 |\n+------+-------+--------------+---------+--------------+\n5 rows in set (0.00 sec)\n\n\nQUERIES:-\n\n1. Create a trigger to keep the track of records that are updated or deleted from the library table. The old values of updated or deleted record should be added in library audit table along with the date of modification, type of modification and the user who performed the modification.\n\nFor Update-\n\nmysql> CREATE TRIGGER t_d AFTER DELETE ON library\n         FOR EACH ROW\n     BEGIN\n         DECLARE b VARCHAR(20);\n         SET b = 'deleted';\n         INSERT INTO lib_audit (B_id, title, edition, no_of_copies, date_of_mod, type_of_op, username)\n         VALUES (OLD.B_id, OLD.title, OLD.edition, OLD.no_of_copies, CURDATE(), b, CURRENT_USER());\n     END$\nQuery OK, 0 rows affected (0.01 sec)\n\n\nmysql> UPDATE library\n    SET authors = 'Kapil Mishra',\n         title = 'TOC',\n         edition = 2,\n        no_of_copies = 4\n     WHERE B_id = 1;\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT * FROM lib_audit;\n+----+-----+-------+------------+-----------+----------+--------------+\n|B_id|title|edition|no_of_copies|date_of_mod|type_of_op|username      |\n+----+-----+-------+------------+-----------+----------+--------------+\n|  1 | TOC |     2 |          4 | 2023-10-12| updated  |root@localhost|\n+----+-----+-------+------------+-----------+----------+--------------+\n1 row in set (0.00 sec)\n\nFor Delete -\nmysql> CREATE TRIGGER t_d AFTER DELETE ON library\n         FOR EACH ROW\n     BEGIN\n         DECLARE b VARCHAR(20);\n         SET b = 'deleted';\n         INSERT INTO lib_audit (B_id, title, edition, no_of_copies, date_of_mod, type_of_op, username)\n         VALUES (OLD.B_id, OLD.title, OLD.edition, OLD.no_of_copies, CURDATE(), b, CURRENT_USER());\n     END$\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> DELETE FROM library where B_id = 2;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from lib_audit;\n+----+-----+-------+------------+-----------+----------+--------------+\n|B_id|title|edition|no_of_copies|date_of_mod|type_of_op|username      |\n+----+-----+-------+------------+-----------+----------+--------------+\n|  1 | TOC |     2 |          4 |2023-10-12 |updated   |root@localhost|\n|  2 | CN  |     4 |          5 |2023-10-12 |deleted   |root@localhost|\n+----+-----+-------+------------+-----------+----------+--------------+\n2 rows in set (0.00 sec)\n\n\n2. To create a trigger to check the number of copies available before issuing a book if number of copies issuing > the number of books available then issue the number of books which are available.\n\nmysql> CREATE TRIGGER t2 BEFORE INSERT ON transaction\n         FOR EACH ROW\n     BEGIN\n         DECLARE no INT;\n        IF NEW.i_r = 'I' THEN\n             SELECT no_of_copies INTO no FROM library WHERE B_id = NEW.B_id;\n             IF NEW.no_of_copies > no THEN\n                 SET NEW.no_of_copies = no;\n             END IF;\n         END IF;\n     END$\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO transaction VALUES (10, 1, 'I', 3);\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from transaction;\n+------+------+------+--------------+\n| t_id | B_id | i_r  | no_of_copies |\n+------+------+------+--------------+\n|   10 |    1 | I    |            3 |\n+------+------+------+--------------+\n1 row in set (0.00 sec)\n\n\n3. To update the number of copies available after the book is issued or returned delete from transaction.\n\nmysql> CREATE TRIGGER t3 AFTER INSERT ON transaction\n         FOR EACH ROW\n     BEGIN\n         IF NEW.i_r = 'I' THEN\n             UPDATE library\n            SET no_of_copies = no_of_copies - NEW.no_of_copies\n             WHERE B_id = NEW.B_id;\n         ELSE\n             UPDATE library\n            SET no_of_copies = no_of_copies + NEW.no_of_copies\n             WHERE B_id = NEW.B_id;\n         END IF;\n     END$\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> INSERT INTO transaction VALUES(10,2,"I",7);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> select * from library;\n+------+-------+--------------+---------+--------------+\n| B_id | title | authors      | edition | no_of_copies |\n+------+-------+--------------+---------+--------------+\n|    1 | TOC   | Kapil Mishra |       2 |            4 |\n|    3 | ISEE  | Rahul De     |       3 |            5 |\n|    4 | DBMS  | Silberschatz |       3 |            2 |\n|    5 | SEPM  | Pressman     |       5 |            6 |\n+------+-------+--------------+---------+--------------+\n4 rows in set (0.00 sec)\n\n\"\"\"\n_8 = \"\"\"\nWrite a program to implement MySQL/Oracle database connectivity with any front-end language to implement Database navigation operations (add, delete, edit etc.)\n----------------------------------------------------------------\nimport mysql.connector\n\ncon = mysql.connector.connect(\n         user='root',\n         password='root123',\n         host='localhost',\n         database='db_user')\n\ndef insert(id,name, age, city):\n    res = con.cursor()\n    sql = "insert into users (id,name,age,city) values (%s,%s,%s,%s)"\n    user = (id,name, age, city)\n    res.execute(sql, user)\n    con.commit()\n    print("Data Insert Success")\n\ndef update(name, age, city,id):\n    res = con.cursor()\n    sql = "update users set name=%s,age=%s,city=%s where id=%s"\n    user = (name, age, city,id)\n    res.execute(sql, user)\n    con.commit()\n    print("Data Update Success")\n\ndef select():\n    res = con.cursor()\n    sql = "SELECT ID,NAME,AGE,CITY from users"\n    res.execute(sql)\n    # result=res.fetchone()\n    # result=res.fetchmany(2)\n    #result = res.fetchall()\n    #print(tabulate(result, headers=["ID", "NAME", "AGE", "CITY"]))\n    print(res.fetchall())\n\ndef delete(id):\n    res = con.cursor()\n    sql = "delete from users where id=%s"\n    user = (id,)\n    res.execute(sql, user)\n    con.commit()\n    print("Data Delete Success")\n\nwhile True:\n    print("1.Insert Data")\n    print("2.Update Data")\n    print("3.Select Data")\n    print("4.Delete Data")\n    print("5.Exit")\n\n    choice = int(input("Enter Your Choice : "))\n\n    if choice == 1:\n        id = input("Enter The Id : ")\n        name = input("Enter Name : ")\n        age = input("Enter Age : ")\n        city = input("Enter City : ")\n        insert(id,name, age, city)\n\n    elif choice == 2:\n        id = input("Enter The Id : ")\n        name = input("Enter Name : ")\n        age = input("Enter Age : ")\n        city = input("Enter City : ")\n        update(name, age, city,id)\n\n    elif choice == 3:\n        select()\n\n    elif choice == 4:\n        id = input("Enter The Id to Delete : ")\n        delete(id)\n\n    elif choice == 5:\n        quit()\n\n    else:\n        print("Invalid Selection . Please Try Again !")\n\n\n\"\"\"\n_b1 = \"\"\"\n\n\n\nAssignment No – B1       \nTitle: Design and Develop MongoDB Queries using CRUD operations. (Use CRUD operations, SAVE method, logical operators.\n\nProblem Statement: Create an Articles Collection and perform basic operations (CRUD) like Insert, Display, Update and Delete operations. Eg. Articles (Tittle, Content, Author, Author_age, Dop, Category, Comment). Comment is an embedded document and also an array. Comment may consist of the Name, Remarks keys\n----------------------------------------------------------------\nQUERIES –\n\n1. Insert couple of Documents.\n\ntest> use b1\n\nb1> db.article.insertMany([\n... {"Title": "Introduction to MongoDB",\n... "Content": "MongoDB is a NoSQL Database",\n... "Author": "John Doe",\n... "Author_age": 30,\n... "Dop": "17-10-2023",\n... "Category": "Database",\n... "Comments": [\n... { "user": "Sam Brown", "comment": "I learned a lot!" },\n... { "user": "Alice Green", "comment": "Thank you for sharing." }\n...  ]}, \n... {"Title": "Web Development",\n... "Content": "Use of MERN",\n... "Author": "Jane Doe",\n... "Dop": "16-10-2023",\n... "Category": "Web",\n... "Comments": [\n... { "user": "Jane Smith", "comment": "Great article!" },\n... { "user": "Bob Johnson", "comment": "Very informative." }\n...  ]} \n... ])\n{\n  acknowledged: true,\n  insertedIds: {\n    '0': ObjectId("652d9b8a07c463bba275588a"),\n    '1': ObjectId("652d9b8a07c463bba275588b")\n  }\n}\n\n2. Display the first document found in database.\n\nb1> db.article.findOne()\n{\n  _id: ObjectId("652d9b8a07c463bba275588a"),\n  Title: 'Introduction to MongoDB',\n  Content: 'MongoDB is a NoSQL Database',\n  Author: 'John Doe',\n  Author_age: 30,\n  Dop: '17-10-2023',\n  Category: 'Database',\n  "Comments": [\n   { "user": "Sam Brown", "comment": "I learned a lot!" },\n   { "user": "Alice Green", "comment": "Thank you for sharing." }\n  ]}\n}\n\n3. Display first document belonging to a certain Author say “Sharma” found in database.\n\nb1>  db.article.findOne({Author:"Rohit Sharma"})\n{\n  _id: ObjectId("652d9ddc07c463bba275588c"),\n  Title: 'Cricket Strategies for Success',\n  Content: 'Effective strategies for winning cricket matches...',\n  Author: 'Rohit Sharma',\n  Author_age: 34,\n  Dop: ISODate("2023-10-18T09:45:00.000Z"),\n  Category: 'Sports',\n  Comments: [\n    { user: 'Sara Williams', comment: 'Fantastic article!' },\n    { user: 'David Lee', comment: 'I learned a lot about cricket.' }\n  ]\n}\n\n4. Modify the comment made by certain person on a certain article.\n\nb1> db.article.update(\n...    { "Title": "Cricket Strategies for Success", "Comments.user": "David Lee" },\n...    { $set: { "Comments.$.comment": "I thoroughly enjoyed reading this article!" } })\n{\n  acknowledged: true,\n  insertedId: null,\n  matchedCount: 1,\n  modifiedCount: 1,\n  upsertedCount: 0\n}\n\nb1> db.article.findOne({ "Title": "Cricket Strategies for Success" })\n{\n  _id: ObjectId("652d9ddc07c463bba275588c"),\n  Title: 'Cricket Strategies for Success',\n  Content: 'Effective strategies for winning cricket matches...',\n  Author: 'Rohit Sharma',\n  Author_age: 34,\n  Dop: ISODate("2023-10-18T09:45:00.000Z"),\n  Category: 'Sports',\n  Comments: [\n    { user: 'Sara Williams', comment: 'Fantastic article!' },\n    {\n      user: 'David Lee',\n      comment: 'I thoroughly enjoyed reading this article!'\n    }]}\n5. Insert record with save method with and without objectID\n\nb1> db.article.save ({\n  "Title": "New Article Without ID",\n  "Content": "This is a new article without an explicit _id field.",\n  "Author": "John Doe",\n  "Author_age": 30,\n  "Dop": new Date("2023-10-19T14:30:00Z"),\n  "Category": "Technology",\n  "Comments": [\n    { "user": "Jane Smith", "comment": "Great article!" },\n    { "user": "Bob Johnson", "comment": "Very informative." }\n  ]\n})\n\n{\n  acknowledged: true,\n  insertedId: ObjectId("652da23d07c463bba275588d")\n}\n\n\nb1> db.article.save ({\n  "_id": 7,\n  "Title": "New Article With Explicit ID",\n  "Content": "This is a new article with an explicit _id field.",\n  "Author": "Jane Doe",\n  "Author_age": 28,\n  "Dop": new Date("2023-10-18T12:00:00Z"),\n  "Category": "Science",\n  "Comments": [\n    { "user": "Sam Brown", "comment": "I learned a lot!" },\n    { "user": "Alice Green", "comment": "Thank you for sharing." }\n  ]\n})\n{ acknowledged: true, insertedId: 7 }\n\n\n6. Update collection with save method.\n\nb1> db.article.save(\n...    { _id: 7 },\n...    { $set: { "Author": "Virat Kohli" } }\n... )\n{\n  acknowledged: true,\n  insertedId: null,\n  matchedCount: 1,\n  modifiedCount: 1,\n  upsertedCount: 0\n}\n\n\n\n\n\n\n\n\n\n7. Add one more comment for particular title.\n\nb1> db.article.updateOne({_id: 7},{$push: {Comments:{user:"Hope", comment: "Bad"}}})\n{\n  acknowledged: true,\n  insertedId: null,\n  matchedCount: 1,\n  modifiedCount: 1,\n  upsertedCount: 0\n}\nb1> db.article.findOne({_id:7})\n{\n  _id: 7,\n  Title: 'New Article With Explicit ID',\n  Content: 'This is a new article with an explicit _id field.',\n  Author: 'Virat Kohli',\n  Author_age: 28,\n  Dop: ISODate("2023-10-18T00:00:00.000Z"),\n  Category: 'Science',\n  Comments: [\n    { user: 'Sam Brown', comment: 'I learned a lot!' },\n    { user: 'Alice Green', comment: 'Thank you for sharing.' },\n    { user: 'Hope', comment: 'Bad' }\n  ]\n}\n\n8. Delete the documents whose author age is less than 18.\n\nb1> db.article.deleteOne( { Author_age: { $lt: 18 } } )\n\n{ acknowledged: true, deletedCount: 0 }\n\n9. Delete All Documents from a Collection\n\nb1> db.article.deleteMany({})\n\n{ acknowledged: true, deletedCount: 5 }\n\n10. Delete the Article collection\n\nb1> db.article.drop()\n\ntrue\n\n\"\"\"\n_b2 = \"\"\"\n\nAssignment No – B2       \nTitle: Implement aggregation and indexing with suitable example using MongoDB\n\nProblem Statement: Create an orders collection with keys order_id, cust_id, cust_name, phone_no(array field), email_id(optional field), item_name, DtOfOrder, quantity, amount, status(P :pending/D:delivered)\n----------------------------------------------------------------\nQueries –\n\n1. Create a simple index on cust_id and also create a simple index on Item_name. Try to make a duplicate entry.\n\nb2> db.orders.createIndex({ cust_id: 1 })\n\ncust_id_1\n\nb2> db.orders.createIndex({ item_name: 1 })\n\nitem_name_1\n\nb2> db.orders.insertOne({\n...     order_id: 2,\n...     cust_id: 101,  // This cust_id already exists\n...     cust_name: "Jane Doe",\n...     phone_no: ["5555555555"],\n...     email_id: "jane.doe@example.com",\n...     item_name: "Product B",\n...     DtOfOrder: new Date("2023-10-18T12:00:00Z"),\n...     quantity: 1,\n...     amount: 50.25,\n...     status: "P"\n... })\n{\n  acknowledged: true,\n  insertedId: ObjectId("652dad7386073509c15f76d2")\n}\n\nb2> db.orders.getIndexes()\n[\n  { v: 2, key: { _id: 1 }, name: '_id_' },\n  { v: 2, key: { cust_id: 1 }, name: 'cust_id_1' },\n  { v: 2, key: { item_name: 1 }, name: 'item_name_1' }\n]\n\n\n2. Create unique index on the order_id key and try to make duplicate entry.\n\nb2> db.orders.createIndex({ order_id: 1 }, { unique: true })\norder_id_1\n\nb2> db.orders.insertOne({ order_id: 2, cust_id: 101, /* This cust_id already exists*/ cust_name: "Jane Doe", phone_no: ["5555555555"], email_id: "jane.doe@example.com", item_name: "Product B", DtOfOrder: new Date("2023-10-18T12:00:00Z"), quantity: 1, amount: 50.25, status: "P" })\n\nMongoServerError: E11000 duplicate key error collection: b2.orders index: order_id_1 dup key: { order_id: 2 }\n\n3. Create a multikey index on phone_no and find the customers with 2 phone numbers.\n\nb2> db.orders.createIndex({ phone_no: 1 }, { multikey: true })\nphone_no_1\n\nb2> db.orders.find({ phone_no: { $size: 2 } })\n[\n  {\n    _id: ObjectId("652dacdb86073509c15f76d1"),\n    order_id: 1,\n    cust_id: 101,\n    cust_name: 'John Doe',\n    phone_no: [ '1234567890', '9876543210' ],\n    email_id: 'john.doe@example.com',\n    item_name: 'Product A',\n    DtOfOrder: ISODate("2023-10-17T12:00:00.000Z"),\n    quantity: 2,\n    amount: 100.5,\n    status: 'P'\n  }\n]\n\n4. Create a sparse index on email_id key and show the effects with and without indexing. \n\nb2> db.orders.find({ email_id: { $exists: true } }).explain()\n{\n  explainVersion: '2',\n  queryPlanner: {\n    namespace: 'b2.orders',\n    indexFilterSet: false,\n    parsedQuery: { email_id: { '$exists': true } },\n    queryHash: '3A720C84',\n    planCacheKey: '3B778558',\n    maxIndexedOrSolutionsReached: false,\n    maxIndexedAndSolutionsReached: false,\n    maxScansToExplodeReached: false,\n    winningPlan: {\n      queryPlan: {\n        stage: 'COLLSCAN',\n        planNodeId: 1,\n        filter: { email_id: { '$exists': true } },\n        direction: 'forward'\n      },\n      slotBasedPlan: {\n        slots: '$$RESULT=s5 env: { s3 = 1697492884775 (NOW), s2 = Nothing (SEARCH_META), s1 = TimeZoneDatabase(America/Detroit...Europe/Vienna) (timeZoneDB) }',\n        stages: '[1] filter {\\n' +\n          '    let [\\n' +\n          '        l1.0 = s4 \\n' +\n          '    ] \\n' +\n          '    in exists(l1.0) \\n' +\n          '} \\n' +\n          '[1] scan s5 s6 none none none none lowPriority [s4 = email_id] @"e67fe1d2-b9e7-4251-87e1-02ecc3abef67" true false '\n      }\n    },\n    rejectedPlans: []\n  },\n  command: {\n    find: 'orders',\n    filter: { email_id: { '$exists': true } },\n    '$db': 'b2'\n  },\n  serverInfo: {\n    host: 'R2-D2',\n    port: 27017,\n    version: '7.0.2',\n    gitVersion: '02b3c655e1302209ef046da6ba3ef6749dd0b62a'\n  },\n  serverParameters: {\n    internalQueryFacetBufferSizeBytes: 104857600,\n    internalQueryFacetMaxOutputDocSizeBytes: 104857600,\n    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,\n    internalDocumentSourceGroupMaxMemoryBytes: 104857600,\n    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,\n    internalQueryProhibitBlockingMergeOnMongoS: 0,\n    internalQueryMaxAddToSetBytes: 104857600,\n    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,\n    internalQueryFrameworkControl: 'trySbeEngine'\n  },\n  ok: 1\n}\n\nb2> db.orders.createIndex({ email_id: 1 }, { sparse: true })\nemail_id_1\n\nb2> db.orders.find({ email_id: { $exists: true } }).explain()\n{\n  explainVersion: '2',\n  queryPlanner: {\n    namespace: 'b2.orders',\n    indexFilterSet: false,\n    parsedQuery: { email_id: { '$exists': true } },\n    queryHash: '3A720C84',\n    planCacheKey: 'F8FF47D7',\n    maxIndexedOrSolutionsReached: false,\n    maxIndexedAndSolutionsReached: false,\n    maxScansToExplodeReached: false,\n    winningPlan: {\n      queryPlan: {\n        stage: 'FETCH',\n        planNodeId: 2,\n        inputStage: {\n          stage: 'IXSCAN',\n          planNodeId: 1,\n          keyPattern: { email_id: 1 },\n          indexName: 'email_id_1',\n          isMultiKey: false,\n          multiKeyPaths: { email_id: [] },\n          isUnique: false,\n          isSparse: true,\n          isPartial: false,\n          indexVersion: 2,\n          direction: 'forward',\n          indexBounds: { email_id: [ '[MinKey, MaxKey]' ] }\n        }\n      },\n      slotBasedPlan: {\n        slots: '$$RESULT=s9 env: { s2 = Nothing (SEARCH_META), s8 = {"email_id" : 1}, s3 = 1697493008036 (NOW), s1 = TimeZoneDatabase(America/Detroit...Europe/Vienna) (timeZoneDB) }',\n        stages: '[2] nlj inner [] [s4, s5, s6, s7, s8] \\n' +\n          '    left \\n' +\n          '        [1] ixseek KS(0A0104) KS(F0FE04) s7 s4 s5 s6 [] @"e67fe1d2-b9e7-4251-87e1-02ecc3abef67" @"email_id_1" true \\n' +\n          '    right \\n' +\n          '        [2] limit 1 \\n' +\n          '        [2] seek s4 s9 s10 s5 s6 s7 s8 [] @"e67fe1d2-b9e7-4251-87e1-02ecc3abef67" true false \\n'\n      }\n    },\n    rejectedPlans: []\n  },\n  command: {\n    find: 'orders',\n    filter: { email_id: { '$exists': true } },\n    '$db': 'b2'\n  },\n  serverInfo: {\n    host: 'R2-D2',\n    port: 27017,\n    version: '7.0.2',\n    gitVersion: '02b3c655e1302209ef046da6ba3ef6749dd0b62a'\n  },\n  serverParameters: {\n    internalQueryFacetBufferSizeBytes: 104857600,\n    internalQueryFacetMaxOutputDocSizeBytes: 104857600,\n    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,\n    internalDocumentSourceGroupMaxMemoryBytes: 104857600,\n    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,\n    internalQueryProhibitBlockingMergeOnMongoS: 0,\n    internalQueryMaxAddToSetBytes: 104857600,\n    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,\n    internalQueryFrameworkControl: 'trySbeEngine'\n  },\n  ok: 1\n}\n\n5. Display all indexes created on order collection and Also show the size of indexes.\n\nb2> db.orders.getIndexes()\n[\n  { v: 2, key: { _id: 1 }, name: '_id_' },\n  { v: 2, key: { cust_id: 1 }, name: 'cust_id_1' },\n  { v: 2, key: { item_name: 1 }, name: 'item_name_1' },\n  { v: 2, key: { order_id: 1 }, name: 'order_id_1', unique: true },\n  { v: 2, key: { phone_no: 1 }, name: 'phone_no_1' },\n  { v: 2, key: { email_id: 1 }, name: 'email_id_1', sparse: true }\n]\n\nb2> db.orders.totalIndexSize()\n188416\n\n6. Delete all indexes\n\nb2>  db.orders.dropIndexes()\n{\n  nIndexesWas: 6,\n  msg: 'non-_id indexes dropped for collection',\n  ok: 1\n}\n\n7. A) Find Total no of orders received so far\n\nb2> db.orders.find({Status:'D'}).count()\n1\n\n   B) How many orders are pending.\n\nb2> db.orders.find({Status:'P'}).count()\n2\n\n8. Show results and details of sorting documents based on amount\n\nb2> db.orders.distinct("cust_name")\n[ 'Jane Doe', 'John Doe' ]\n\n9. A) Find Total no of orders received so far\n\nb2> db.orders.find({Status:'D'}).count()\n1\n\n   B) How many orders are pending.\n\nb2> db.orders.find({Status:'P'}).count()\n3\n\n\n10. Show results and details of sorting documents based on amount\n\nb2> db.orders.find().sort({Amt:1}).pretty()\n[\n  {\n    _id: ObjectId("652dacdb86073509c15f76d1"),\n    order_id: 1,\n    cust_id: 101,\n    cust_name: 'John Doe',\n    phone_no: [ '1234567890', '9876543210' ],\n    email_id: 'john.doe@example.com',\n    item_name: 'Product A',\n    DtOfOrder: ISODate("2023-10-17T12:00:00.000Z"),\n    quantity: 2,\n    amount: 100.5,\n    status: 'P'\n  },\n  {\n    _id: ObjectId("652dad7386073509c15f76d2"),\n    order_id: 2,\n    cust_id: 101,\n    cust_name: 'Jane Doe',\n    phone_no: [ '5555555555' ],\n    email_id: 'jane.doe@example.com',\n    item_name: 'Product B',\n    DtOfOrder: ISODate("2023-10-18T12:00:00.000Z"),\n    quantity: 1,\n    amount: 50.25,\n    status: 'P'\n  },\n  {\n    _id: ObjectId("652db3d686073509c15f76d4"),\n    order_id: 2,\n    cust_id: 102,\n    cust_name: 'Jane Doe',\n    phone_no: [ '555-555-5555' ],\n    email_id: 'jane.doe@example.com',\n    item_name: 'Product B',\n    DtOfOrder: ISODate("2023-10-18T12:00:00.000Z"),\n    quantity: 1,\n    amount: 50.25,\n    status: 'P'\n  },\n  {\n    _id: ObjectId("652db3d686073509c15f76d5"),\n    order_id: 3,\n    cust_id: 103,\n    cust_name: 'Bob Smith',\n    phone_no: [ '111-111-1111', '222-222-2222' ],\n    item_name: 'Product C',\n    DtOfOrder: ISODate("2023-10-19T14:30:00.000Z"),\n    quantity: 3,\n    amount: 150.75,\n    status: 'D'\n  }]\n\n\n\n11. Show how many orders are placed by each customer.\n\nb2>db.orders.aggregate({$group:{_id:"$Cust_name",cnt_of_order:{$sum:1}}})\n\n[ { _id: null, cnt_of_order: 6 } ]\n\n12. Display all customer ids and their total pending order amount in descending order.\n\nb2> db.orders.aggregate([\n...     {$match: { status: "P" },{$group: {_id: "$cust_id",\ntotalPendingAmount: { $sum: "$amount" }}},{$sort: { totalPendingAmount: 1 }}])\n\n[\n  { _id: 101, totalPendingAmount: 150.75 },\n  { _id: 104, totalPendingAmount: 100.5 },\n  { _id: 102, totalPendingAmount: 50.25 }\n]\n\n13. Display all customer ids in ascending order with total order amount which have been is delivered.\n\nb2> db.orders.aggregate([{$match: { status: "D" } },{$group: {_id: "$cust_id",totalOrderAmount: { $sum: "$amount" }}},{$$sort: { _id: 1 }}])\n\n[\n  { _id: 103, totalOrderAmount: 150.75 },\n  { _id: 105, totalOrderAmount: 120 }\n]\n\n14. Show top three Selling Items from orders collection\n\nb2> db.orders.aggregate({$group:{_id:"$Item_name",totqty:{$sum:"$Qty"}}}, {$sort:{totqty:-1}},{$limit:3})\n\n[\n  { "_id": "Product B", "totalQuantity": 9 },\n  { "_id": "Product A", "totalQuantity": 7 },\n  { "_id": "Product C", "totalQuantity": 4 }\n]\n\n15. Find the date on which maximum orders are received.\n\nb2> db.orders.aggregate([{ $group: { _id: "$DtOfOrder", orderCount: { $sum: 1 } } }, { $sort: { orderCount: -1 } }, { $l$limit: 1 }])\n\n[ { _id: ISODate("2023-10-18T12:00:00.000Z"), orderCount: 2 } ]\n\n16. Find which customer has placed maximum orders.\n\nb2> db.orders.aggregate([{ $group: { _id: "$cust_id", orderCount: { $sum: 1 } } }, { $sort: { orderCount: -1 } }, { $lim$limit: 1 }])\n\n[ { _id: 101, orderCount: 2 } ]\n\n\"\"\"\n_b3 = \"\"\"\n\n\nAssignment No – B3      \n\nTitle: MongoDB - Map reduces operations.\n\nProblem Statement: Create an orders collection with fields customer id, order date, status, price and items, quantity. Execute the given queries using MapReduce. Perform map reduce operation on orders collection.\n----------------------------------------------------------------\nQueries – \n\n\n1. Display total price per customer.\n\nb3> var map = function(){emit(this.customer_id, this.price);};\n\nb3> var red = function(customerId, prices){return Array.sum(prices);};\n\nb3> db.orders.mapReduce(map,red,{'out':'neworders'})\n\nb3> db.total_price_per_customer.find();\n{ "_id" : 101, "price" : 50.00 }\n{ "_id" : 102, "price" : 75.50 }\n{ "_id" : 103, "price" : 30.25 }\n{ "_id" : 104, "price" : 90.00 }\n\n \n2. Display total price per customer having status= D \n\nb3> db.orders.mapReduce(map,red,{'query':{Status:'D'},'out':'new1'})\n{ result: 'new1', ok: 1 }\n\nb3> db.new1.find().pretty()\n{ "_id" : 102, "price" : 75.50 }\n{ "_id" : 104, "price" : 90.00 }\n\n\n3. Display total price for Status =P \n\nb3> db.orders.mapReduce(map,red,{'query':{Status:'P'},'out':'new2'})\n{ result: 'new2', ok: 1 }\n\nb3> db.new2.find().pretty()\n{ "_id" : 101, "price" : 50.00 }\n{ "_id" : 103, "price" : 30.25 }\n\n\n\n\n\n\n\n\n\n\n\n4. Finding count of all keys in orders collection\n\nb3> db.orders.mapReduce(map1,red1,{'out':'new3'})\n{  "result" : "new3",  "timeMillis" : 356,  "counts" : {  "input" : 6,  "emit" : 62, "reduce" : 11, "output" : 11 }, "ok" : 1 }\n\nb3> db.new3.find().pretty()\n{ "_id" : "Amt", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Cust_id", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Cust_name", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "DtOfOrder", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Email_id", "value" : { "CountOfKey" : 2 } } \n{ "_id" : "Item_name", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Order_id", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Phone_no", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Qty", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "Status", "value" : { "CountOfKey" : 6 } } \n{ "_id" : "_id", "value" : { "CountOfKey" : 6 } }\n\n\"\"\"\n_b4 = \"\"\"\n\n\nAssignment No – B4      \nTitle: Database Connectivity\n\nProblem Statement: Write a program to implement MongoDB database connectivity with any front-end language to implement Database navigation operations (add, delete, edit etc.) \n----------------------------------------------------------------\n\n# importing module from pymongo import MongoClient \n try: \n    # creation of MongoClient     client=MongoClient()     print("Connection Successfully!!") except:     print("Could Not Connect to MongoDB!!") \n     \n# Connect with the portnumber and host client = MongoClient("mongodb://localhost:27017/") \n \n# Access database \n# Method 2 :mydatabase = client['myDB'] mydatabase = client.myDB  \n# Access collection of the database \n# Method 2 : mycollection=mydatabase['user_Table'] mycollection = mydatabase.user_Table \n  \ndef insert(id,name,age,city): \n    # dictionary to be added in the database     record={             'ID': id, \n            'Name': name, \n            'Age': age, \n            'city': city \n            } \n     \n    # inserting the data in the database     #rec =mycollection.insert_one(record)     mycollection.insert_one(record)     print("Data Insert Success") \n def update(name, age, city,id): \n     \n    # update all the user data with given ID     result = mycollection.update_many(         {"ID":id},                  # update filter \n        {                           #update action \n                "$set":{ \n                        "Name": name, \n                        "Age": age, \n                        "city": city \n                        },                 "$currentDate":{"lastModified":True} \n                   \n                }         )     print("Data updated with id",result) \n    print("Total Record Updated",result.matched_count) \n      def showRec(): \n    # To find() all the entries inside collection name 'user_Table'     cursor = mycollection.find()     for record in cursor:         print(record) \n          def delete(id): \n    # deletes a document of user data with given ID     deleteFilter = {'ID': id} \n         result= mycollection.delete_many(deleteFilter) \n    #Alternative you can use delete_one :: \nmycollection.delete_one(deleteFilter) \n     print("Data deleted with id",result) \n          while True: \n        print("1.Insert Data")         print("2.Update Data")         print("3.Print Data")         print("4.Delete Data")         print("5.Exit") \n \n        choice = int(input("Enter Your Choice : ")) \n                 if choice == 1: \n                id = input("Enter The Id : ")                 name = input("Enter Name : ")                 age = input("Enter Age : ")                 city = input("Enter City : ")                 insert(id, name, age, city) \n                #,name, age, city) \n         elif choice == 2: \n                id = input("Enter the ID to be updated: ")                 name = input("Enter new Name : ")                 age = input("Enter new Age : ") \n                city = input("Enter new City : ")                 update(name, age, city,id) \n         elif choice == 3:                 showRec() \n         elif choice == 4:                 id = input("Enter The ID to Delete : ")                 delete(id) \n         elif choice == 5:                 quit() \n         else: \n                print("Invalid Selection . Please Try Again !") \n \n\n\nOUTPUT –\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 1\nEnter The Id : 101\nEnter Name : Ved\nEnter Age : 20\nEnter City : Pune\nData Insert Success\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 3\n{'_id': ObjectId('6158f20ac0a28f8ec453a0cf'), 'ID': '101', 'Name': 'Ved', 'Age': '20', 'city': 'Pune'}\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 2\nEnter the ID to be updated: 101\nEnter new Name : Om\nEnter new Age : 19\nEnter new City : Pune\nData updated with id <pymongo.results.UpdateResult object at 0x...>\nTotal Record Updated 1\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 3\n{'_id': ObjectId('6158f20ac0a28f8ec453a0cf'), 'ID': '101', 'Name': 'Om', 'Age': '19', 'city': 'Pune'}\n\n\n\n\n\n\n\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 4\nEnter The ID to Delete : 101\nData deleted with id <pymongo.results.DeleteResult object at 0x...>\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 3\n\n1.Insert Data\n2.Update Data\n3.Print Data\n4.Delete Data\n5.Exit\n\nEnter Your Choice : 5\n\n\"\"\"\n_0 = \"\"\"\nmysql -u root -p\n\"\"\"\npswd, x = "bloodyhell", 1\nassArr = ["_2a","_2b","_3","_4","_5","_6","_7","_8","_b1","_b2","_b3","_b4"]\nassMain = [_2a,_2b,_3,_4,_5,_6,_7,_8,_b1,_b2,_b3,_b4]\nwhile x:\n    password = input("Enter Password: ")\n    if password == pswd: \n        ch = input("Enter AssNo: ")\n        try:\n            for i in range(len(assArr)):\n                if ch==assArr[i]: index = i\n            print(assMain[index])\n            x = 0\n        except: print("Wrong Input")\n    else: \n        print("Wrong Password!")\n""")